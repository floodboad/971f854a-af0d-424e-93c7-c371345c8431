// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.enumerator.DiskStatusEnum;
import com.sinosoft.model.Disk;
import com.sinosoft.model.DiskDataOnDemand;
import com.sinosoft.model.VirtualMachineDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DiskDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DiskDataOnDemand: @Component;
    
    private Random DiskDataOnDemand.rnd = new SecureRandom();
    
    private List<Disk> DiskDataOnDemand.data;
    
    @Autowired
    VirtualMachineDataOnDemand DiskDataOnDemand.virtualMachineDataOnDemand;
    
    public Disk DiskDataOnDemand.getNewTransientDisk(int index) {
        Disk obj = new Disk();
        setAttachPoint(obj, index);
        setAttachTime(obj, index);
        setCapacity(obj, index);
        setCreateTime(obj, index);
        setCreator(obj, index);
        setDeleteTime(obj, index);
        setDescription(obj, index);
        setDiskName(obj, index);
        setManager(obj, index);
        setModifyTime(obj, index);
        setStatus(obj, index);
        setValidTime(obj, index);
        return obj;
    }
    
    public void DiskDataOnDemand.setAttachPoint(Disk obj, int index) {
        String attachPoint = "attachPoint_" + index;
        obj.setAttachPoint(attachPoint);
    }
    
    public void DiskDataOnDemand.setAttachTime(Disk obj, int index) {
        Date attachTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAttachTime(attachTime);
    }
    
    public void DiskDataOnDemand.setCapacity(Disk obj, int index) {
        Integer capacity = new Integer(index);
        obj.setCapacity(capacity);
    }
    
    public void DiskDataOnDemand.setCreateTime(Disk obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void DiskDataOnDemand.setCreator(Disk obj, int index) {
        String creator = "creator_" + index;
        obj.setCreator(creator);
    }
    
    public void DiskDataOnDemand.setDeleteTime(Disk obj, int index) {
        Date deleteTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDeleteTime(deleteTime);
    }
    
    public void DiskDataOnDemand.setDescription(Disk obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void DiskDataOnDemand.setDiskName(Disk obj, int index) {
        String diskName = "diskName_" + index;
        obj.setDiskName(diskName);
    }
    
    public void DiskDataOnDemand.setManager(Disk obj, int index) {
        String manager = "manager_" + index;
        obj.setManager(manager);
    }
    
    public void DiskDataOnDemand.setModifyTime(Disk obj, int index) {
        Date modifyTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setModifyTime(modifyTime);
    }
    
    public void DiskDataOnDemand.setStatus(Disk obj, int index) {
        DiskStatusEnum status = DiskStatusEnum.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void DiskDataOnDemand.setValidTime(Disk obj, int index) {
        Date validTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setValidTime(validTime);
    }
    
    public Disk DiskDataOnDemand.getSpecificDisk(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Disk obj = data.get(index);
        String id = obj.getDiskId();
        return Disk.findDisk(id);
    }
    
    public Disk DiskDataOnDemand.getRandomDisk() {
        init();
        Disk obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getDiskId();
        return Disk.findDisk(id);
    }
    
    public boolean DiskDataOnDemand.modifyDisk(Disk obj) {
        return false;
    }
    
    public void DiskDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Disk.findDiskEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Disk' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Disk>();
        for (int i = 0; i < 10; i++) {
            Disk obj = getNewTransientDisk(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
