// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.enumerator.AlarmSeverityEnum;
import com.sinosoft.enumerator.MonitorNameEnum;
import com.sinosoft.enumerator.MonitorSourceEnum;
import com.sinosoft.enumerator.MonitorTypeEnum;
import com.sinosoft.model.MonitorSetting;
import com.sinosoft.model.MonitorSettingDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MonitorSettingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MonitorSettingDataOnDemand: @Component;
    
    private Random MonitorSettingDataOnDemand.rnd = new SecureRandom();
    
    private List<MonitorSetting> MonitorSettingDataOnDemand.data;
    
    public MonitorSetting MonitorSettingDataOnDemand.getNewTransientMonitorSetting(int index) {
        MonitorSetting obj = new MonitorSetting();
        setCreateTime(obj, index);
        setEnabled(obj, index);
        setMonitorName(obj, index);
        setMonitorSource(obj, index);
        setMonitorType(obj, index);
        setOsAlarmId(obj, index);
        setSeverityLevel(obj, index);
        setSourceId(obj, index);
        setThreshold(obj, index);
        setThresholdUnit(obj, index);
        return obj;
    }
    
    public void MonitorSettingDataOnDemand.setCreateTime(MonitorSetting obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void MonitorSettingDataOnDemand.setEnabled(MonitorSetting obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void MonitorSettingDataOnDemand.setMonitorName(MonitorSetting obj, int index) {
        MonitorNameEnum monitorName = MonitorNameEnum.class.getEnumConstants()[0];
        obj.setMonitorName(monitorName);
    }
    
    public void MonitorSettingDataOnDemand.setMonitorSource(MonitorSetting obj, int index) {
        MonitorSourceEnum monitorSource = MonitorSourceEnum.class.getEnumConstants()[0];
        obj.setMonitorSource(monitorSource);
    }
    
    public void MonitorSettingDataOnDemand.setMonitorType(MonitorSetting obj, int index) {
        MonitorTypeEnum monitorType = MonitorTypeEnum.class.getEnumConstants()[0];
        obj.setMonitorType(monitorType);
    }
    
    public void MonitorSettingDataOnDemand.setOsAlarmId(MonitorSetting obj, int index) {
        String osAlarmId = "osAlarmId_" + index;
        obj.setOsAlarmId(osAlarmId);
    }
    
    public void MonitorSettingDataOnDemand.setSeverityLevel(MonitorSetting obj, int index) {
        AlarmSeverityEnum severityLevel = AlarmSeverityEnum.class.getEnumConstants()[0];
        obj.setSeverityLevel(severityLevel);
    }
    
    public void MonitorSettingDataOnDemand.setSourceId(MonitorSetting obj, int index) {
        String sourceId = "sourceId_" + index;
        obj.setSourceId(sourceId);
    }
    
    public void MonitorSettingDataOnDemand.setThreshold(MonitorSetting obj, int index) {
        Float threshold = new Integer(index).floatValue();
        obj.setThreshold(threshold);
    }
    
    public void MonitorSettingDataOnDemand.setThresholdUnit(MonitorSetting obj, int index) {
        String thresholdUnit = "thresholdUnit_" + index;
        obj.setThresholdUnit(thresholdUnit);
    }
    
    public MonitorSetting MonitorSettingDataOnDemand.getSpecificMonitorSetting(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MonitorSetting obj = data.get(index);
        Long id = obj.getId();
        return MonitorSetting.findMonitorSetting(id);
    }
    
    public MonitorSetting MonitorSettingDataOnDemand.getRandomMonitorSetting() {
        init();
        MonitorSetting obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return MonitorSetting.findMonitorSetting(id);
    }
    
    public boolean MonitorSettingDataOnDemand.modifyMonitorSetting(MonitorSetting obj) {
        return false;
    }
    
    public void MonitorSettingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = MonitorSetting.findMonitorSettingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MonitorSetting' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MonitorSetting>();
        for (int i = 0; i < 10; i++) {
            MonitorSetting obj = getNewTransientMonitorSetting(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
