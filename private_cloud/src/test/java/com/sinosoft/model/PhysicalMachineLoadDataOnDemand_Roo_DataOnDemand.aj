// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.model.PhysicalMachineLoad;
import com.sinosoft.model.PhysicalMachineLoadDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PhysicalMachineLoadDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhysicalMachineLoadDataOnDemand: @Component;
    
    private Random PhysicalMachineLoadDataOnDemand.rnd = new SecureRandom();
    
    private List<PhysicalMachineLoad> PhysicalMachineLoadDataOnDemand.data;
    
    public PhysicalMachineLoad PhysicalMachineLoadDataOnDemand.getNewTransientPhysicalMachineLoad(int index) {
        PhysicalMachineLoad obj = new PhysicalMachineLoad();
        setBytesIn(obj, index);
        setBytesOut(obj, index);
        setCpuIdle(obj, index);
        setCpuLoad(obj, index);
        setCpuSystem(obj, index);
        setCpuUser(obj, index);
        setFreeDisk(obj, index);
        setFreeMemory(obj, index);
        setHostName(obj, index);
        setReportTime(obj, index);
        return obj;
    }
    
    public void PhysicalMachineLoadDataOnDemand.setBytesIn(PhysicalMachineLoad obj, int index) {
        Float bytesIn = new Integer(index).floatValue();
        obj.setBytesIn(bytesIn);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setBytesOut(PhysicalMachineLoad obj, int index) {
        Float bytesOut = new Integer(index).floatValue();
        obj.setBytesOut(bytesOut);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setCpuIdle(PhysicalMachineLoad obj, int index) {
        Float cpuIdle = new Integer(index).floatValue();
        obj.setCpuIdle(cpuIdle);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setCpuLoad(PhysicalMachineLoad obj, int index) {
        Float cpuLoad = new Integer(index).floatValue();
        obj.setCpuLoad(cpuLoad);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setCpuSystem(PhysicalMachineLoad obj, int index) {
        Float cpuSystem = new Integer(index).floatValue();
        obj.setCpuSystem(cpuSystem);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setCpuUser(PhysicalMachineLoad obj, int index) {
        Float cpuUser = new Integer(index).floatValue();
        obj.setCpuUser(cpuUser);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setFreeDisk(PhysicalMachineLoad obj, int index) {
        Float freeDisk = new Integer(index).floatValue();
        obj.setFreeDisk(freeDisk);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setFreeMemory(PhysicalMachineLoad obj, int index) {
        Float freeMemory = new Integer(index).floatValue();
        obj.setFreeMemory(freeMemory);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setHostName(PhysicalMachineLoad obj, int index) {
        String hostName = "hostName_" + index;
        obj.setHostName(hostName);
    }
    
    public void PhysicalMachineLoadDataOnDemand.setReportTime(PhysicalMachineLoad obj, int index) {
        Date reportTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReportTime(reportTime);
    }
    
    public PhysicalMachineLoad PhysicalMachineLoadDataOnDemand.getSpecificPhysicalMachineLoad(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PhysicalMachineLoad obj = data.get(index);
        Long id = obj.getId();
        return PhysicalMachineLoad.findPhysicalMachineLoad(id);
    }
    
    public PhysicalMachineLoad PhysicalMachineLoadDataOnDemand.getRandomPhysicalMachineLoad() {
        init();
        PhysicalMachineLoad obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return PhysicalMachineLoad.findPhysicalMachineLoad(id);
    }
    
    public boolean PhysicalMachineLoadDataOnDemand.modifyPhysicalMachineLoad(PhysicalMachineLoad obj) {
        return false;
    }
    
    public void PhysicalMachineLoadDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PhysicalMachineLoad.findPhysicalMachineLoadEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PhysicalMachineLoad' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PhysicalMachineLoad>();
        for (int i = 0; i < 10; i++) {
            PhysicalMachineLoad obj = getNewTransientPhysicalMachineLoad(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
