// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.enumerator.OperationSeverityEnum;
import com.sinosoft.enumerator.OperationStatusEnum;
import com.sinosoft.enumerator.ServiceNameEnum;
import com.sinosoft.model.OperationLog;
import com.sinosoft.model.OperationLogDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect OperationLogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OperationLogDataOnDemand: @Component;
    
    private Random OperationLogDataOnDemand.rnd = new SecureRandom();
    
    private List<OperationLog> OperationLogDataOnDemand.data;
    
    public OperationLog OperationLogDataOnDemand.getNewTransientOperationLog(int index) {
        OperationLog obj = new OperationLog();
        setObjectId(obj, index);
        setOperation(obj, index);
        setOperationResult(obj, index);
        setOperationStatus(obj, index);
        setOperationTime(obj, index);
        setOperator(obj, index);
        setServiceName(obj, index);
        setSeverityLevel(obj, index);
        return obj;
    }
    
    public void OperationLogDataOnDemand.setObjectId(OperationLog obj, int index) {
        String objectId = "objectId_" + index;
        obj.setObjectId(objectId);
    }
    
    public void OperationLogDataOnDemand.setOperation(OperationLog obj, int index) {
        String operation = "operation_" + index;
        obj.setOperation(operation);
    }
    
    public void OperationLogDataOnDemand.setOperationResult(OperationLog obj, int index) {
        String operationResult = "operationResult_" + index;
        obj.setOperationResult(operationResult);
    }
    
    public void OperationLogDataOnDemand.setOperationStatus(OperationLog obj, int index) {
        OperationStatusEnum operationStatus = OperationStatusEnum.class.getEnumConstants()[0];
        obj.setOperationStatus(operationStatus);
    }
    
    public void OperationLogDataOnDemand.setOperationTime(OperationLog obj, int index) {
        Date operationTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOperationTime(operationTime);
    }
    
    public void OperationLogDataOnDemand.setOperator(OperationLog obj, int index) {
        String operator = "operator_" + index;
        obj.setOperator(operator);
    }
    
    public void OperationLogDataOnDemand.setServiceName(OperationLog obj, int index) {
        ServiceNameEnum serviceName = ServiceNameEnum.class.getEnumConstants()[0];
        obj.setServiceName(serviceName);
    }
    
    public void OperationLogDataOnDemand.setSeverityLevel(OperationLog obj, int index) {
        OperationSeverityEnum severityLevel = OperationSeverityEnum.class.getEnumConstants()[0];
        obj.setSeverityLevel(severityLevel);
    }
    
    public OperationLog OperationLogDataOnDemand.getSpecificOperationLog(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OperationLog obj = data.get(index);
        Long id = obj.getId();
        return OperationLog.findOperationLog(id);
    }
    
    public OperationLog OperationLogDataOnDemand.getRandomOperationLog() {
        init();
        OperationLog obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return OperationLog.findOperationLog(id);
    }
    
    public boolean OperationLogDataOnDemand.modifyOperationLog(OperationLog obj) {
        return false;
    }
    
    public void OperationLogDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = OperationLog.findOperationLogEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OperationLog' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OperationLog>();
        for (int i = 0; i < 10; i++) {
            OperationLog obj = getNewTransientOperationLog(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
