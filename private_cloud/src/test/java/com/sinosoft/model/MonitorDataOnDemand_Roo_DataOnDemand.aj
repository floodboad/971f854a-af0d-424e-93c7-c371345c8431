// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.enumerator.AlarmSeverityEnum;
import com.sinosoft.enumerator.MonitorNameEnum;
import com.sinosoft.enumerator.MonitorSourceEnum;
import com.sinosoft.enumerator.MonitorTypeEnum;
import com.sinosoft.model.Monitor;
import com.sinosoft.model.MonitorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MonitorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MonitorDataOnDemand: @Component;
    
    private Random MonitorDataOnDemand.rnd = new SecureRandom();
    
    private List<Monitor> MonitorDataOnDemand.data;
    
    public Monitor MonitorDataOnDemand.getNewTransientMonitor(int index) {
        Monitor obj = new Monitor();
        setDefaultThreshold(obj, index);
        setDescription(obj, index);
        setMonitorName(obj, index);
        setMonitorSource(obj, index);
        setMonitorType(obj, index);
        setSeverityLevel(obj, index);
        setThresholdUnit(obj, index);
        return obj;
    }
    
    public void MonitorDataOnDemand.setDefaultThreshold(Monitor obj, int index) {
        Float defaultThreshold = new Integer(index).floatValue();
        obj.setDefaultThreshold(defaultThreshold);
    }
    
    public void MonitorDataOnDemand.setDescription(Monitor obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void MonitorDataOnDemand.setMonitorName(Monitor obj, int index) {
        MonitorNameEnum monitorName = MonitorNameEnum.class.getEnumConstants()[0];
        obj.setMonitorName(monitorName);
    }
    
    public void MonitorDataOnDemand.setMonitorSource(Monitor obj, int index) {
        MonitorSourceEnum monitorSource = MonitorSourceEnum.class.getEnumConstants()[0];
        obj.setMonitorSource(monitorSource);
    }
    
    public void MonitorDataOnDemand.setMonitorType(Monitor obj, int index) {
        MonitorTypeEnum monitorType = MonitorTypeEnum.class.getEnumConstants()[0];
        obj.setMonitorType(monitorType);
    }
    
    public void MonitorDataOnDemand.setSeverityLevel(Monitor obj, int index) {
        AlarmSeverityEnum severityLevel = AlarmSeverityEnum.class.getEnumConstants()[0];
        obj.setSeverityLevel(severityLevel);
    }
    
    public void MonitorDataOnDemand.setThresholdUnit(Monitor obj, int index) {
        String thresholdUnit = "thresholdUnit_" + index;
        obj.setThresholdUnit(thresholdUnit);
    }
    
    public Monitor MonitorDataOnDemand.getSpecificMonitor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Monitor obj = data.get(index);
        Long id = obj.getId();
        return Monitor.findMonitor(id);
    }
    
    public Monitor MonitorDataOnDemand.getRandomMonitor() {
        init();
        Monitor obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Monitor.findMonitor(id);
    }
    
    public boolean MonitorDataOnDemand.modifyMonitor(Monitor obj) {
        return false;
    }
    
    public void MonitorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Monitor.findMonitorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Monitor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Monitor>();
        for (int i = 0; i < 10; i++) {
            Monitor obj = getNewTransientMonitor(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
