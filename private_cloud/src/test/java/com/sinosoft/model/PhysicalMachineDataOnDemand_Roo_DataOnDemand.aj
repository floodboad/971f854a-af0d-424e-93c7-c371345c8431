// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sinosoft.model;

import com.sinosoft.enumerator.PhysicalMachineStatusEnum;
import com.sinosoft.model.PhysicalMachine;
import com.sinosoft.model.PhysicalMachineDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PhysicalMachineDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PhysicalMachineDataOnDemand: @Component;
    
    private Random PhysicalMachineDataOnDemand.rnd = new SecureRandom();
    
    private List<PhysicalMachine> PhysicalMachineDataOnDemand.data;
    
    public PhysicalMachine PhysicalMachineDataOnDemand.getNewTransientPhysicalMachine(int index) {
        PhysicalMachine obj = new PhysicalMachine();
        setCpuNumber(obj, index);
        setCreateTime(obj, index);
        setDescription(obj, index);
        setDiskSize(obj, index);
        setHostName(obj, index);
        setHypervisorId(obj, index);
        setIpAddress(obj, index);
        setMemorySize(obj, index);
        setStatus(obj, index);
        setVerified(obj, index);
        return obj;
    }
    
    public void PhysicalMachineDataOnDemand.setCpuNumber(PhysicalMachine obj, int index) {
        Integer cpuNumber = new Integer(index);
        obj.setCpuNumber(cpuNumber);
    }
    
    public void PhysicalMachineDataOnDemand.setCreateTime(PhysicalMachine obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void PhysicalMachineDataOnDemand.setDescription(PhysicalMachine obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void PhysicalMachineDataOnDemand.setDiskSize(PhysicalMachine obj, int index) {
        Float diskSize = new Integer(index).floatValue();
        obj.setDiskSize(diskSize);
    }
    
    public void PhysicalMachineDataOnDemand.setHostName(PhysicalMachine obj, int index) {
        String hostName = "hostName_" + index;
        obj.setHostName(hostName);
    }
    
    public void PhysicalMachineDataOnDemand.setHypervisorId(PhysicalMachine obj, int index) {
        String hypervisorId = "hypervisorId_" + index;
        obj.setHypervisorId(hypervisorId);
    }
    
    public void PhysicalMachineDataOnDemand.setIpAddress(PhysicalMachine obj, int index) {
        String ipAddress = "ipAddress_" + index;
        obj.setIpAddress(ipAddress);
    }
    
    public void PhysicalMachineDataOnDemand.setMemorySize(PhysicalMachine obj, int index) {
        Float memorySize = new Integer(index).floatValue();
        obj.setMemorySize(memorySize);
    }
    
    public void PhysicalMachineDataOnDemand.setStatus(PhysicalMachine obj, int index) {
        PhysicalMachineStatusEnum status = PhysicalMachineStatusEnum.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void PhysicalMachineDataOnDemand.setVerified(PhysicalMachine obj, int index) {
        Boolean verified = Boolean.TRUE;
        obj.setVerified(verified);
    }
    
    public PhysicalMachine PhysicalMachineDataOnDemand.getSpecificPhysicalMachine(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PhysicalMachine obj = data.get(index);
        String id = obj.getHostId();
        return PhysicalMachine.findPhysicalMachine(id);
    }
    
    public PhysicalMachine PhysicalMachineDataOnDemand.getRandomPhysicalMachine() {
        init();
        PhysicalMachine obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getHostId();
        return PhysicalMachine.findPhysicalMachine(id);
    }
    
    public boolean PhysicalMachineDataOnDemand.modifyPhysicalMachine(PhysicalMachine obj) {
        return false;
    }
    
    public void PhysicalMachineDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PhysicalMachine.findPhysicalMachineEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PhysicalMachine' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PhysicalMachine>();
        for (int i = 0; i < 10; i++) {
            PhysicalMachine obj = getNewTransientPhysicalMachine(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
